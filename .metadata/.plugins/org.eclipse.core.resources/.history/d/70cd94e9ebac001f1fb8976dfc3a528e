package animation;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JPanel;

public class MyAnimation extends JPanel {
    private final Shape[] shapes = new Shape[5];

    public MyAnimation(int width, int height) {
        for (int i = 0; i < shapes.length; i++) {
            shapes[i] = new Shape(width, height, this);  // Create shape
            new Thread(shapes[i]).start();  // Start shape thread
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (Shape s : shapes) {
            g.setColor(Color.RED);  // Use red for all shapes
            if (s.type == 0) g.fillOval(s.x, s.y, 30, 30);  // Circle
            else if (s.type == 1) g.fillRect(s.x, s.y, 30, 30);  // Square
            else g.fillPolygon(new int[]{s.x, s.x + 30, s.x - 30}, new int[]{s.y, s.y + 30, s.y + 30}, 3);  // Triangle
        }
    }

    private static class Shape implements Runnable {
        int x, y, speedX = 5, speedY = 5, maxX, maxY, type;

        Shape(int width, int height, MyAnimation panel) {
            maxX = width - 30; maxY = height - 30;
            x = (int) (Math.random() * maxX); y = (int) (Math.random() * maxY);
            type = (int) (Math.random() * 3);  // Randomly pick shape type
        }

        public void run() {
            while (true) {
                x += speedX; y += speedY;
                if (x > maxX || x < 0) speedX = -speedX;
                if (y > maxY || y < 0) speedY = -speedY;
                repaint();  // Repaint panel
                try { Thread.sleep(50); } catch (InterruptedException ignored) {}
            }
        }
    }
}
