package animation;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JPanel;

public class MyAnimation extends JPanel {
    private final Shape[] shapes = new Shape[5];

    public MyAnimation(int width, int height) {
        for (int i = 0; i < shapes.length; i++) {
            shapes[i] = new Shape(width, height, this);  // Create a Shape object
            new Thread(shapes[i]).start();  // Start a thread for each shape
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (Shape shape : shapes) {
            g.setColor(Color.RED);  // All shapes will be red

            if (shape.type == 0 || shape.type == 2) {  // Circle
                g.fillOval(shape.x, shape.y, 30, 30);  // Draw circle
            } else if (shape.type == 1) {  // Rectangle
                g.fillRect(shape.x, shape.y, 30, 50);  // Draw rectangle
            } else if(shape.type == 3 || shape.type == 4) {  // Square
                g.fillRect(shape.x, shape.y, 30, 20);  // Draw square
            }
        }
    }

    private static class Shape implements Runnable {
        int x, y, speedX = 5, speedY = 5, maxX, maxY, type;
        final JPanel panel;

        Shape(int width, int height, JPanel panel) {
            maxX = width - 30;  // Subtract shape size to keep within bounds
            maxY = height - 30;
            this.panel = panel;
            x = (int) (Math.random() * maxX);  // Random x position
            y = (int) (Math.random() * maxY);  // Random y position
            type = (int) (Math.random() * 3);  // Random shape type (0 = circle, 1 = rectangle, 2 = square)
        }

        public void run() {
            while (true) {
                x += speedX;
                y += speedY;
                if (x > maxX || x < 0) speedX = -speedX;  // Bounce off horizontal walls
                if (y > maxY || y < 0) speedY = -speedY;  // Bounce off vertical walls
                panel.repaint();  // Trigger panel repaint to draw the updated positions
                try { Thread.sleep(50); } catch (InterruptedException ignored) {}
            }
        }
    }
}
