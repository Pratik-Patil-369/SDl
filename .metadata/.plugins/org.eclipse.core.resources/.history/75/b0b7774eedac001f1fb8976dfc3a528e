package animation;

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JPanel;

public class MyAnimation extends JPanel {
    private final Shape[] shapes = new Shape[5];  // 5 shapes in total

    public MyAnimation(int width, int height) {
        for (int i = 0; i < shapes.length; i++) {
            shapes[i] = new Shape(width, height);
            new Thread(shapes[i]).start();  // Start a new thread for each shape
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (Shape s : shapes) {
            g.setColor(Color.RED);  // All shapes are red
            if (s.type == 0) g.fillOval(s.x, s.y, 30, 30);    // Circle
            if (s.type == 1) g.fillRect(s.x, s.y, 30, 30);    // Rectangle
            if (s.type == 2) g.fillRect(s.x, s.y, 30, 30);    // Square (same as rectangle)
        }
    }

    private static class Shape implements Runnable {
        int x, y, speedX = 5, speedY = 5, maxX, maxY, type;

        Shape(int width, int height) {
            maxX = width - 30;  // Subtract the shape's size to prevent it going out of bounds
            maxY = height - 30;
            x = (int) (Math.random() * maxX);  // Random starting position
            y = (int) (Math.random() * maxY);
            type = (int) (Math.random() * 3);  // Randomly choose a shape: 0=Circle, 1=Rectangle, 2=Square
        }

        public void run() {
            while (true) {
                x += speedX; y += speedY;
                if (x > maxX || x < 0) speedX = -speedX;  // Bounce off left/right borders
                if (y > maxY || y < 0) speedY = -speedY;  // Bounce off top/bottom borders
                repaint();  // Trigger a repaint of the panel
                try { Thread.sleep(50); } catch (InterruptedException ignored) {}
            }
        }
    }
}
